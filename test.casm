
var message = "hello, world!";
var message_len = $sizeof(message);

var other_message = "bye, world!";
var other_message_len = $sizeof(other_message);

import proc nativeTest;
import proc alloc;
import proc puts;

//entrypoint procedure
entry proc main 
{
    //memory instructions
    /*
        //general purpose memory
        load8 r0, r1;
        load16
        load32
        load64

        store8 r0, 0;
        store16
        store32 
        store64

        //data memory
        daddr r0, 0; //address translation

        dload8 r1, r0; //gp rel load 
        dload16
        dload32
        dload64

        dstore8 r1, 0; //gp rel store
        dstore16
        dstore32
        dstore64

        //stack memory
        saddr r0, 0; //address translation
        spadd r0; //add signed int to sp 

        sload8 r1, r0; //sp rel load
        sload16
        sload32
        sload64

        sstore8 r1, r0; //sp rel store
        sstore16
        sstore32
        sstore64

        spush8 r0; //sp rel store+add
        spush16 r0; //sp rel store+add
        spush32 r0; //sp rel store+add
        spush64 r0; //sp rel store+add
        
        spop8 r0; //sp rel load+sub
        spop16 r0; //sp rel load+sub
        spop32 r0; //sp rel load+sub
        spop64 r0; //sp rel load+sub
    */

    a0 = daddr message; //daddr
    a1 = move message_len;
    call puts;

    c0 = clear;

    loop_begin: {
        c1 = neql c0, 10;
        c0 = iadd c0, 1;

        jumpif c1, loop_begin;
    }

    a0 = daddr other_message; //daddr
    a1 = move other_message_len;
    call puts;

    a7 = move 10;
    a6 = move 0xa3;
    a5 = move 0xb4;

    call print;

    a7 = move exit;

exit:
    ebreak;
    return;
}

//fused multiply add
proc fmadd {
    a7 = iadd a0, a1;
    a7 = imul a7, a2;

    return;
}

var hello_message = "hello!";
var hello_message_len = $sizeof(hello_message);

/* print function */
export proc print {
    a0 = daddr hello_message;
    a1 = move hello_message_len;
    call puts;

    loop: { 
        if: /* c0 == 100 */ {
            c1 = neql c0, 10;
            c0 = iadd c0, 1;
            //ebreak;
            jumpif c1, loop;
        } else: {
            //do something at the end of the loop idk
        }
    }

    end:
        return;
}

export proc recurse {
    a7 = iadd a0, a1;
    call recurse;
    unreachable;
}