//instrinsics $include, $sizeof, $inline_call

$module_stack(64000);
$module_call_stack(64);

$impdef(imp0, "syscall");

const file = $include("file.zasm");
const cstd = $include("cstd.zasm");

var x: []v8 = "lolflll";
var y: v16 = 32;

var x = "hello, world";
export var stdout = 0;

import var x: v32;

const value_constant: v8 = 0xf3;

import proc printf from wasi;
import proc puts from wasi;
import proc fopen from wasi;
import proc fread from wasi;

export proc _start = main;

$opt_level("none");

const addr = $zalloc(300);

export proc main {
    //define static variable
    var x: v32 = 0;

    gread r0, &y;
    gaddr r0, &y;

    $inline_call(lol1);

    iadd c0, c1, c2;
    isub c2, 3, c2;
    iadd c2, -5, c3;

    move c2, 0;

    loop:
        move a0, &message;
        move a1, $sizeof(message);
        call printf;

        var message = "hello, world"; 

        eql c2, 100, c3;
        iadd c2, 1, c2;
        jumpif c3, loop;
};

export proc lol1 {
    
};